version : 2.1

orbs:
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0
  aws-ecr: circleci/aws-ecr@6.15.3


jobs:
  # Creating EKS Cluster using orbs
  main-cluster:
     executor: aws-eks/python3
     parameters:
       cluster-name:
         description: |
           Name of the EKS cluster
         type: string
     steps:
       - checkout
       - kubernetes/install
       - aws-eks/update-kubeconfig-with-authenticator:
           cluster-name: << parameters.cluster-name >>
           install-kubectl: true
       - run:
           name: "Services verification"
           command: |
             kubectl get services
             kubectl get all

  main-deployment:
     executor: aws-eks/python3
     parameters:
       cluster-name:
         description: |
           Name of the EKS cluster
         type: string
         default: main-cluster
     steps:
       - checkout
       - aws-eks/update-kubeconfig-with-authenticator:
           cluster-name: << parameters.cluster-name >>
           install-kubectl: true
       - kubernetes/create-or-update-resource:
           resource-file-path: main-deployment.yml
           resource-name: deployment/main-deployment.yml
       - run:
           name: "verify main deployment"
           command: |
             kubectl get all

# In this step, the linting of the new docker file takes place.  
  lint-main:
     docker:
       - image: python:3.7.3-stretch
     working_directory: ~/repo
     steps:
       - checkout
       - run:
           name: "Setup & Installing packages"
           command: |
             make setup
             make install
       - run:
           name: "Linting Code Phase"
           command: |
             . venv/bin/activate
             make lint
             
 #In this step, the new rolling deployment takes place.           
  new-deployment:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
          default: main-cluster
      steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: new-deployment.yml
            resource-name: deployment/new-deployment
        - run:
            name: "Testing the new app"
            command: |
              kubectl get nodes
              kubectl get all
              kubectl get pods

workflows:
  deployment:
    jobs:
        - aws-eks/create-cluster:
            cluster-name: main-cluster
        - main-deployment:
            cluster-name: main-cluster
            requires:
              - aws-eks/create-cluster
        - lint-main:
            requires:
              - main-deployment
        - aws-ecr/build-and-push-image:
            dockerfile: Dockerfile
            no-output-timeout: 20m
            repo: myimages
            tag: 'mynginx2'
            requires:
              - lint-main
        - new-deployment:
            cluster-name: prod-cluster
            requires:
              - aws-ecr/build-and-push-image
        - aws-eks/delete-cluster:
            cluster-name: main-cluster
            requires:
              - new-deployment